import axios from 'axios';

const API_BASE_URL = "https://blood-donation-backend-buge.onrender.com/api/v1/admin";

// Create axios instance for admin API
const adminApiClient = axios.create({
  baseURL: API_BASE_URL,
  headers: {
    "Content-Type": "application/json",
  },
  withCredentials: true,
});

// Add request interceptor for token handling
adminApiClient.interceptors.request.use(
  (config) => {
    // Get user data from localStorage
    const userData = localStorage.getItem("bloodDonationUser");
    if (userData) {
      const user = JSON.parse(userData);
      // If token exists in user data, add it to Authorization header
      if (user.token) {
        config.headers.Authorization = `Bearer ${user.token}`;
      }
    }
    return config;
  },
  (error) => {
    return Promise.reject(error);
  }
);

// Add response interceptor for error handling
adminApiClient.interceptors.response.use(
  (response) => response,
  (error) => {
    if (
      error.response &&
      (error.response.status === 401 || error.response.status === 403)
    ) {
      localStorage.removeItem("bloodDonationUser");
      if (!window.location.href.includes("/login")) {
        window.location.href = "/login";
      }
    }
    return Promise.reject(error);
  }
);

export const adminApi = {
  // Dashboard Stats
  getDashboardStats: async () => {
    const response = await adminApiClient.get('/dashboard/stats');
    return response.data;
  },

  // Users
  getUsers: async (params: URLSearchParams) => {
    const response = await adminApiClient.get(`/users?${params}`);
    return response.data;
  },

  updateUserStatus: async (userId: string, isActive: boolean) => {
    const response = await adminApiClient.put(`/users/${userId}/status`, { isActive });
    return response.data;
  },

  deleteUser: async (userId: string) => {
    const response = await adminApiClient.delete(`/users/${userId}`);
    return response.data;
  },

  // Events
  getEvents: async (params: URLSearchParams) => {
    const response = await adminApiClient.get(`/events?${params}`);
    return response.data;
  },

  updateEventStatus: async (eventId: string, status: string) => {
    const response = await adminApiClient.put(`/events/${eventId}/status`, { status });
    return response.data;
  },

  deleteEvent: async (eventId: string) => {
    const response = await adminApiClient.delete(`/events/${eventId}`);
    return response.data;
  },

  // Blood Requests
  getBloodRequests: async (params: URLSearchParams) => {
    const response = await adminApiClient.get(`/blood-requests?${params}`);
    return response.data;
  },

  updateBloodRequestStatus: async (requestId: string, status: string) => {
    const response = await adminApiClient.put(`/blood-requests/${requestId}/status`, { status });
    return response.data;
  },

  deleteBloodRequest: async (requestId: string) => {
    const response = await adminApiClient.delete(`/blood-requests/${requestId}`);
    return response.data;
  },

  // Posts
  getPosts: async (params: URLSearchParams) => {
    const response = await adminApiClient.get(`/posts?${params}`);
    return response.data;
  },

  deletePost: async (postId: string) => {
    const response = await adminApiClient.delete(`/posts/${postId}`);
    return response.data;
  }
};
